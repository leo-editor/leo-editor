<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20190116145609.1"><vh>Retired settings</vh>
<v t="ekr.20190116145609.2"><vh>@bool added-setting = True</vh></v>
<v t="ekr.20190116145609.3"><vh>@bool allow-middle-button-paste = False</vh></v>
<v t="ekr.20190116145609.4"><vh>@bool allow_section_references_in_at_auto = False</vh></v>
<v t="ekr.20190116145609.5"><vh>@bool append-output-to-output-file = False</vh></v>
<v t="ekr.20190116145609.6"><vh>@bool at-auto-separate-non-def-nodes = False</vh></v>
<v t="ekr.20190116145609.7"><vh>@bool full-import-checks = True</vh></v>
<v t="ekr.20190116145609.8"><vh>@bool ignore-blank-lines = True</vh></v>
<v t="ekr.20190116145609.9"><vh>@bool js-importer-clean-lws = True</vh></v>
<v t="ekr.20190116145609.10"><vh>@bool make-whitespace-visible = False</vh></v>
<v t="ekr.20190116145609.11"><vh>@bool minibufferSearchesShowFindTab = True</vh></v>
<v t="ekr.20190116145609.12"><vh>@bool put-expansion-bits-in-leo-files = True</vh></v>
<v t="ekr.20190116145609.13"><vh>@bool read-only = False</vh></v>
<v t="ekr.20190116145609.14"><vh>@bool redirect-execute-script-output-to-log-pane = False</vh></v>
<v t="ekr.20190116145609.15"><vh>@bool script-change = None</vh></v>
<v t="ekr.20190116145609.16"><vh>@bool script-search = None</vh></v>
<v t="ekr.20190116145609.17"><vh>@bool show-only-find-tab-options = True</vh></v>
<v t="ekr.20190116145609.18"><vh>@bool stayInTreeAfterEditHeadline = True</vh></v>
<v t="ekr.20190116145609.19"><vh>@bool swap-mac-keys = False</vh></v>
<v t="ekr.20190116145609.20"><vh>@bool use-plugins = True</vh></v>
<v t="ekr.20190116145609.21"><vh>@bool warn-when-plugins-fail-to-load = True</vh></v>
<v t="ekr.20190116145609.22"><vh>@bool write-recent-files-as-needed = True</vh></v>
<v t="ekr.20190116145609.23"><vh>@bool write-strips-blank-lines = True</vh></v>
<v t="ekr.20190116145609.24"><vh>@int global-setting-for-unit-tests = 132</vh></v>
<v t="ekr.20190116145609.25"><vh>@int icon-bar-widgets-per-row = 20</vh></v>
<v t="ekr.20190116145609.26"><vh>@int js-importer-min-rescan-size = 0</vh></v>
<v t="ekr.20190116145609.27"><vh>@int js-importer-min-scan-size = 0</vh></v>
<v t="ekr.20190116145609.28"><vh>@string debugger-default-target = None</vh></v>
<v t="ekr.20190116145609.29"><vh>@string debugger-force-target = None</vh></v>
<v t="ekr.20190116145609.30"><vh>@string default-tangle-directory = None</vh></v>
<v t="ekr.20190116145609.31"><vh>@string editor-orientation = horizontal</vh></v>
<v t="ekr.20190116145609.32"><vh>@string headline-gmt-time = None</vh></v>
<v t="ekr.20190116145609.33"><vh>@string http_bookmark_unl = Bookmarks</vh></v>
<v t="ekr.20190116145609.34"><vh>@string qt-default-encoding = UTF-8</vh></v>
<v t="ekr.20190116145609.35"><vh>@string qt-ui-file-name = qt_main.ui</vh></v>
<v t="ekr.20190116145609.36"><vh>Retired: all Compare panel options</vh>
<v t="ekr.20190116145609.37"><vh>files &amp; directories</vh>
<v t="ekr.20190116145609.38"><vh>@bool ignore-first-line-of-file-1 = False</vh></v>
<v t="ekr.20190116145609.39"><vh>@bool ignore-first-line-of-file-2 = False</vh></v>
<v t="ekr.20190116145609.40"><vh>@bool ignore-interior-whitespace = False</vh></v>
<v t="ekr.20190116145609.41"><vh>@bool ignore-leading-whitespace = False</vh></v>
<v t="ekr.20190116145609.42"><vh>@bool ignore-sentinel-lines = False</vh></v>
<v t="ekr.20190116145609.43"><vh>@string compare-file-1 = None</vh></v>
<v t="ekr.20190116145609.44"><vh>@string compare-file-2 = None</vh></v>
<v t="ekr.20190116145609.45"><vh>@string limit-directory-search-extension = .py</vh></v>
<v t="ekr.20190116145609.46"><vh>@string output-file = None</vh></v>
</v>
<v t="ekr.20190116145609.47"><vh>output options</vh>
<v t="ekr.20190116145609.48"><vh>@int limit-count = 9</vh></v>
<v t="ekr.20190116145609.49"><vh>@bool print-both-lines-for-matches = False</vh></v>
<v t="ekr.20190116145609.50"><vh>@bool print-matching-lines = False</vh></v>
<v t="ekr.20190116145609.51"><vh>@bool print-mismatching-lines = True</vh></v>
<v t="ekr.20190116145609.52"><vh>@bool print-trailing-lines = True</vh></v>
</v>
</v>
<v t="ekr.20190116145609.53"><vh>Retired: all Inkscape options</vh>
<v t="ekr.20190116145609.54"><vh>@string inkscape-template = ../docs/inkscape-template.svg</vh></v>
<v t="ekr.20190116145609.55"><vh>@string inkscape-bin = "c:\Program Files (x86)\Inkscape\inkscape.exe"</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="ekr.20190116145609.1"></t>
<t tx="ekr.20190116145609.10">
1: Show blanks as [ ] and tabs as [t]

</t>
<t tx="ekr.20190116145609.11">True: minibuffer commands show the Find Tab.
False: minibuffer commands hide the Find Tab.

Important: the Find Tab always exists regardless of this setting.</t>
<t tx="ekr.20190116145609.12">True (recommended):
    Write "E" attribute bits in &lt;v&gt; elements.
    Leo outlines will record the expansion state of all nodes.
    
False: (Good for files like unitTest.leo)
    Suppress "E" attribute bits in &lt;v&gt; elements.
    Only the ancestors of the presently selected node will
    be expanded when Leo opens an outline.</t>
<t tx="ekr.20190116145609.13">False: Leo writes leoSettings.leo files.</t>
<t tx="ekr.20190116145609.14">False: Print sends its output to stdout (console) when doing Execute Script command.
True:  Print redirected to Leo's log pane when doing Execute Script command.
</t>
<t tx="ekr.20190116145609.15"></t>
<t tx="ekr.20190116145609.16">When the Script Search radio button is selected Leo treats the contents of the
Search Text as a script to execute whenever any kind of Find command is
executed. Similarly, when the Script Change checkbox is selected Leo treats the
context of the Change Text as a script to execute whenever any kind of Change
command is executed. See below for just how this works.

Script-based find-change is extremely powerful. In effect, Leo's Find/Change
panel becomes a new platform for running scripts interactively. Leo now has all
the find/change capability of pattern matching languages like Snobol and Icon,
just by using the capabilities of the plain Python language. Moreover, Leo can
deliver these capabilities interactively or not depending which buttons you push
in Leo's Find/Change panel.

Script-based find/change frees the user from having to control script-based
searches interactively. Rather than forcing find/change scripts to implement
their own interactive controls, it is much easier to use what Leo already has.

HOW IT WORKS

Leo dedicates a Python dictionary called app.searchDict for communication
between Leo and the search and change scripts. The search and change scripts may
also use app.searchDict for communication between themselves. Leo sets
app.searchDict["type"] to "find", "change", "findAll" or "changeAll" to indicate
the kind of command being executed. Scripts may use all other entries in
app.searchDict as they please.

Leo executes the find script once when you press the Find button (or the Change
then Find button) in Leo's Find/Change dialog. Typically, the find script would
traversing the tree and highlight the found text or otherwise indicate to the
user that the find operation has succeeded. However, the script can do anything
it pleases.

Leo executes the the find script repeatedly when you press the Find All button.
Leo keeps executing the find script until app.searchDict["continue"] evaluates
to false. Initially there is no entry for app.searchDict["continue"], so the
find script must set app.searchDict["continue"] = true if it wants Leo to keep
executing it.

Leo executes the change script once when you press the Change button. Typically,
the change script would change the selected text. Usually the change script will
compute the new value of body text and call v.setBodyStringOrPane(newText) to
make that change permanent. 

The change script also may handle undo, typically by calling
c.frame.onBodyChanged(v,"Change",oldText=oldText). Leo does not handle undo
automatically. Indeed, Leo makes no assumptions whatever about what the change
script really does.

Leo executes the the change script repeatedly when you press the Change All
button. Just as with the Find All command, Leo keeps executing the change script
until app.searchDict["continue"] evaluates to false.

Most find and change scripts will ignore settings in the Find Panel like "whole
word", "pattern match", and "reverse". However, these settings are available to
the scripts via ivars such as c.whole_word_flag, etc. if desired.

For examples, see the node called 'Script Find and Script Change' in leoDocs.leo.</t>
<t tx="ekr.20190116145609.17">True: (recommended) The Find tab shows only options, not text or buttons.
False: (legacy)     The Find tab shows text, options and buttons.</t>
<t tx="ekr.20190116145609.18">This allows the newline character to switch from the outline pane to the body pane.</t>
<t tx="ekr.20190116145609.19">This setting has effect only on MacOS.

When True, bindings that appear to specify the control key actually specify the command (clover) key.</t>
<t tx="ekr.20190116145609.2"></t>
<t tx="ekr.20190116145609.20">True: Leo loads plugins on startup.

Warnings:

- This is a global option ONLY. It can only be set in the leoSettings.leo files
that Leo reads during startup. Changing this option in other Leo files will have
NO effect.

- When this option is enabled, plugins could potentially execute HOSTILE CODE
contained in Leo files. See further warnings in LeoDocs.leo.</t>
<t tx="ekr.20190116145609.21"></t>
<t tx="ekr.20190116145609.22">True: update .leoRecentFiles.txt, creating it if if does not exist.
False: don't update .leoRecentFiles and don't create it.</t>
<t tx="ekr.20190116145609.23">
True:  Leo strips blanks and tabs from otherwise blank lines.
False: Leo retains whitespace even in otherwise blank lines.</t>
<t tx="ekr.20190116145609.24">This is not used in Leo, except in unit tests.

Please do not change this; it would make a unit test fail.</t>
<t tx="ekr.20190116145609.25">The number of buttons or widget in any one row of icons in the icon area.
If there are more than this number, a new row is created.</t>
<t tx="ekr.20190116145609.26">If &gt; 0, the importer rescans blocks only if they have more than the indicated number of lines.</t>
<t tx="ekr.20190116145609.27">If &gt; 0, the importer scans files only if they have more than the indicated number of lines.</t>
<t tx="ekr.20190116145609.28">The debug target to use if no target is specified otherwise.

c:\prog\tigris-cvs\leo\src\leo.py
</t>
<t tx="ekr.20190116145609.29">The debug target to use regardless of the selected node or other settings.</t>
<t tx="ekr.20190116145609.3">True: allow linux-like pastes using a mouse's middle button.

Important: this may cause crashes on some platforms.</t>
<t tx="ekr.20190116145609.30">DEPRECATED

The default directory used if no directory specified in @path, @root or @file directives.

</t>
<t tx="ekr.20190116145609.31">vertical:   pack body-pane editors vertically.
horizontal: pack body-pane editors horizontally.</t>
<t tx="ekr.20190116145609.32">True:  use gmt time when inserting time into headlines.

False: use local time.</t>
<t tx="ekr.20190116145609.33"></t>
<t tx="ekr.20190116145609.34">@nocolor

The encoding assumed for strings used by the Qt plugin.
UTF-8 is a reasonable default.
Change to your Python's default encoding if you have unicode problems.</t>
<t tx="ekr.20190116145609.35"># Don't change this unless you know what you are doing.</t>
<t tx="ekr.20190116145609.36"></t>
<t tx="ekr.20190116145609.37"></t>
<t tx="ekr.20190116145609.38">True: Ignore the first line of compare_file_1 when comparing files.

</t>
<t tx="ekr.20190116145609.39">True: Ignore the first line of compare_file_2 when comparing files.</t>
<t tx="ekr.20190116145609.4">True: (Experimental): The @auto write code expands section references.
False: (Legacy):      The @auto write code ignores section references.

@language rest
@wrap

**Note**: This setting has been retired for the following reasons:

1. The new javascript importer *always* generate section references for non-trivial programs. As a result, the legacy value for this setting would cause the javascript importer to fail.

2. The new @auto write code writes expands section references if they exist.  Otherwise, the write code writes the line as is, without any complaint. As a result, there should be no problem if an imported code contains something that looks like a section reference but isn't.
</t>
<t tx="ekr.20190116145609.40">True: Ignore whitespace after the leading whitespace of a line when comparing files.</t>
<t tx="ekr.20190116145609.41">True:  Ignore leading whitespace of each line when comparing files.

False: The recommended setting when comparing Python source files.

</t>
<t tx="ekr.20190116145609.42">True: Ignore sentinel lines when comparing files.

Leo sets sentinel comment delimiters from the first line of each file.  This option has no effect if the first line is not a @+leo line.</t>
<t tx="ekr.20190116145609.43">The path to the first file or directory to be compared.

Directory compares ignore a filename part of the path, if present.

E.g., c:/directory2/spam.py is valid for directory compares</t>
<t tx="ekr.20190116145609.44">The path to the second file or directory to be compared.

Directory compares ignore a filename part of the path, if present.

E.g., c:/directory2/spam.py is valid for directory compares</t>
<t tx="ekr.20190116145609.45">Limit directory searches to files with the given file extension.

None  Compares all files when comparing directories.
.py   Compares only .py files when comparing directories.</t>
<t tx="ekr.20190116145609.46">The path to the output file.

Leo will silently write to this file, regardless of whether it already exists, creating the file if needed.

Leo will write to the log pane if this path is empty or invalid.</t>
<t tx="ekr.20190116145609.47">These options affecting how Leo shows the results of file compares.

Leo gathers statistics regardless of these options.</t>
<t tx="ekr.20190116145609.48">0: Show lines regardless of the number of mismatches.

n: Stop showing lines after n mismatches.

</t>
<t tx="ekr.20190116145609.49">True:  Print lines of both files when showing matching lines.

False: Print only the line of compare_file_1 when showing matching lines.

</t>
<t tx="ekr.20190116145609.5">True:  Append output to output file.

False: Replace output file with results of compare.</t>
<t tx="ekr.20190116145609.50">True: Print lines that match using the print_both_lines_for_matches option.

</t>
<t tx="ekr.20190116145609.51">True: Print lines that do not compare equal to each other.

</t>
<t tx="ekr.20190116145609.52">True: Print lines all lines in one file after an end-of-file is seen on the other file.</t>
<t tx="ekr.20190116145609.53"></t>
<t tx="ekr.20190116145609.54">Path to inkscape template file
</t>
<t tx="ekr.20190116145609.55">Path to Inkscape executable</t>
<t tx="ekr.20190116145609.6">True:  put non-definition code in separate nodes.
False: put trailing non-definition code at the start of the next node.</t>
<t tx="ekr.20190116145609.7">True: import commands (including @auto nodes) do full checks.</t>
<t tx="ekr.20190116145609.8">True: Ignore blanks lines when comparing files.

</t>
<t tx="ekr.20190116145609.9">True: The javascript importer cleans blank lines and regularizes indentaion.
</t>
</tnodes>
</leo_file>
