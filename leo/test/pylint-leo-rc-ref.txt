# lint Python modules using external checkers.
# 
# This is the main checker controling the other ones and the reports
# generation. It is itself both a raw checker and an astng checker in order
# to:
# * handle message activation / deactivation at the module level
# * handle some basic but necessary stats'data (number of classes, methods...)
# 
[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Profiled execution.
profile=no

# Add <file or directory> to the black list. It should be a base name, not a
# path. You may set this option multiple times.
ignore=CVS

# Pickle collected data for later comparisons.
persistent=yes

# Set the cache size for astng objects.
cache-size=500

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=


[MESSAGES CONTROL]

# Enable only checker(s) with the given id(s). This option conflicts with the
# disable-checker option
#enable-checker=

# Enable all checker(s) except those with the given id(s). This option
# conflicts with the enable-checker option

# disable-checker=BASIC,CLASSES,DESIGN,FORMAT,SIMILARITIES,IMPORTS,MISCELLANEOUS
disable-checker=DESIGN,SIMILARITIES,IMPORTS

# Enable all messages in the listed categories.
# enable-msg-cat=

# Disable all messages in the listed categories.

# disable-msg-cat=DESIGN,SIMILARITIES,IMPORTS
# disable-msg-cat=BASIC,CLASSES,DESIGN,IMPORTS,FORMAT,SIMILARITIES,TYPECHECK,VARIABLES

# Enable the message(s) with the given id(s).

# This doesn't seem to work.
# enable-msg=E0001,E0011,E0012,E0100,E0101,E0102,E0103,E0104,E0105,E0106,E1101,E1102,E1103,E1111,E0601,E0602,E0611,E0202,E0203,E0211,E0213,E0221,E0222,E1001,E1002,E1003,E1010,E0701,E0702,E0501,

# Disable the message(s) with the given id(s).

# Disable some warnings

# disable=W0142,R0201,C0111,C0321,C0322,C0323,C0324,W0404,W0703,W0704

# Disable all common warnings

# **NOT** Disabled:
# C0311 Bad indentation
# W0104 Statement seems to have no effect
# W0106 Unnecessary semicolon
# W0107 Unnecessary pass statement

disable=
   I0011,
# I0011 locally-disabled
   C0111,
# C0111 Missing docstring
   C0301,
# C0301 Line too long
   C0303,
# C0303 Trailing whitespace
   C0321,
# C0321 More than one statement on a single line
   C0322,
# C0322 Operator not followed by a space
   C0323,
# C0323 Operator not preceded by a space
   C0324,
# C0324 Comma not followed by a space
   C0325,
# C0325 Unnecessary parens after print keyword
###   C0330,
# C0330 Bad Continuation
   C1001,
# C1001 Old-style class defined
   F0401,
# F0401 Can not import module.
   R0201,
# R0201 Method could be a function.
   R0902,
# R0902 Too many instance attributes
   R0903,
# R0903 Too few public methods (0/1)
   W0102,
# W0102 Dangerous default value [] as argument
   W0122,
# W0122 Use of the exec statement
   W0141,
# W0141 Used builtin function 'map'
   W0142,
# W0142 Used * or * magic*
   W0201,
# W0201 Attribute defined outside __init__
   W0212,
# W0212 Access to a protected member of a client class
   W0231,
# W0231 __init__ method from base class is not called
   W0232,
# W0232 Class has no __init__ method
   W0401,
# W0401 Wildcard import (pychecker)
   W0402,
# W0402 Uses of a deprecated module (like string)
   W0404,
# W0404 Reimport <module>: let pychecker do this.
   W0406,
# W0406 Module import itself
   W0602,
# W0602 Using global for x but no assigment is done (leoEditCommands defines classList after all classes).
   W0603,
# W0603 Using the global statement
   W0612,
# W0612 Unused variable
   W0613,
# W0613 Unused argument (sometimes used for debugging)
   W0621,
# W0621 Redefining <name> from outer scope: especially __pychecker__
   W0622,
# W0622 Redefining built-in
   W0631,
# W0631 Using possibly undefined loop variable
   W0702,
# W0702 No exception type specified
   W0703,
# W0703 Catch "Exception"
   W0704,
# W0704 Except doesn\'t do anything
   W1111
# W1111 Assigning to function call which only returns None

[REPORTS]

# set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html
output-format=text

# Include message's id in output
include-ids=yes

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
files-output=no

# Tells wether to display a full report or only the messages
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note).You have access to the variables errors warning, statement which
# respectivly contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (R0004).

evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Add a comment according to your evaluation note. This is used by the global
# evaluation report (R0004).

comment=no

# Enable the report(s) with the given id(s).
# enable-report=

# Disable the report(s) with the given id(s).
# R0001,Messages by category
# R0002 % errors / warnings by module
# R0003 Messages
# R0004 Global evaluation

# R0101 Statistics by type
# R0401 External dependencies
# R0402 graph ofinternal and externaldependencies
# R0701 Raw metrics
# R0801 Duplication

disable-report=R0001,R0002,R0003,R0004,R0101,R0401,R0402,R0701,R0801


# BASIC...
# checks for :
# * doc strings
# * modules / classes / functions / methods / arguments / variables name
# * number of arguments, local variables, branchs, returns and statements in
# functions, methods
# * required module attributes
# * dangerous default values as arguments
# * redefinition of function / method / class
# * uses of the global statement
# 
[BASIC]

# Required attributes for module, separated by a comma
required-attributes=

# Regular expression which should only match functions or classes name which do
# not require a docstring
no-docstring-rgx=__.*__



# Regular expression which should only match correct module names
# module-rgx=(([a-z_][a-z0-9_]*)|([a-zA-Z0-9]+))$
module-rgx=[a-zA-Z][a-zA-Z0-9_]+$

# Regular expression which should only match correct module level names
#const-rgx=(([A-Z_][A-Z1-9_]*)|(__.*__))$
const-rgx=(([a-zA-Z_][a-zA-Z0-9_]+)|(__.*__))$

# Regular expression which should only match correct class names
# class-rgx=[A-Z_][a-zA-Z0-9]+$
class-rgx=[a-zA-Z_][a-zA-Z0-9_]+$

# Regular expression which should only match correct function names
# function-rgx=[a-z_][a-z0-9_]{2,30}$
function-rgx=[a-zA-Z_][a-zA-Z0-9_]*$

# Regular expression which should only match correct method names
#method-rgx=[a-z_][a-z0-9_]{2,30}$
method-rgx=[a-zA-Z_][a-zA-Z0-9_]*$

# Regular expression which should only match correct instance attribute names
#attr-rgx=[a-z_][a-z0-9_]{2,30}$
attr-rgx=[a-zA-Z_][a-zA-Z0-9_]*$
class-attribute-rgx=[a-zA-Z_][a-zA-Z0-9_]*$

# Regular expression which should only match correct argument names
#argument-rgx=[a-z_][a-z0-9_]{2,30}$
argument-rgx=[a-zA-Z_][a-zA-Z0-9_]*$

# Regular expression which should only match correct variable names
#variable-rgx=[a-z_][a-z0-9_]{2,30}$
variable-rgx=[a-zA-Z_][a-zA-Z0-9_]*$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
#inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$
inlinvar-rgx=[a-zA-Z][a-zA-Z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
good-names=_,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z

#__pychecker__,__version__,\
#__not_a_plugin__,__plugin_id__,__plugin_name__,__plugin_priority__,__plugin_group__,__plugin_requires__,\
#__revision__,__author__,__date__,__cvsid__,\
#_emacs_cmd,_vim_cmd,_vim_exe,\
#_AssignUniqueConstantValue,_PluginDatabase
# 

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,baz,toto,tutu,tata

# List of builtins function names that should not be used, separated by a comma
bad-functions=map,filter,apply,input

# TYPECHECK...
# try to find bugs in the code using type inference
[TYPECHECK]

# Tells wether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# When zope mode is activated, consider the acquired-members option to ignore
# access to some undefined attributes.
zope=no

# List of members which are usually get through zope's acquisition mecanism and
# so shouldn't trigger E0201 when accessed (need zope=yes to be considered).
acquired-members=REQUEST,acl_users,aq_parent

# VARIABLES...
# checks for
# * unused variables / imports
# * undefined variables
# * redefinition of variable from builtins or from an outer scope
# * use of variable before assigment
# 
[VARIABLES]

# Tells wether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching names used for dummy variables (i.e. not used).
# EKR: added junk,args,keys,keywords,unused_*
dummy-variables-rgx=_|dummy|junk|args|keys|keywords|event|tag|unused_.*


# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=

# CLASSES...
# checks for :
# * methods without self as first argument
# * overridden methods signature
# * access only to existant members via self
# * attributes not defined in the __init__ method
# * supported interfaces implementation
# * unreachable code
# 
[CLASSES]

# List of interface methods to ignore, separated by a comma. This is used for
# instance to not check methods defines in Zope's Interface base class.
ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by

# List of method names used to declare (i.e. assign) instance attributes.
# EKR: the last item in the list does not work properly: I added a dummy.
defining-attr-methods=__init__,__new__,setUp,init,finishCreate,initReadIvars,initWriteIvars,initCommonIvars,initIvars,dummy_init

# DESIGN...
# checks for sign of poor/misdesign:
# * number of methods, attributes, local variables...
# * size, complexity of functions, methods
# 
[DESIGN]

# Maximum number of arguments for function / method
### max-args=5
max-args=20

# Maximum number of locals for function / method body
###max-locals=15
max-locals=100

# Maximum number of return / yield for function / method body
###max-returns=6
max-returns=50

# Maximum number of branch for function / method body
###max-branches=12
max-branches=100

# Maximum number of statements in function / method body
###max-statements=50
max-statements=500

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
###max-attributes=7
max-attributes=100

# Minimum number of public methods for a class (see R0903).
###min-public-methods=2
min-public-methods=1

# Maximum number of public methods for a class (see R0904).
###max-public-methods=20
max-public-methods=400

# IMPORTS...
# checks for
# * external modules dependencies
# * relative / wildcard imports
# * cyclic imports
# * uses of deprecated modules
# 
[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,string,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report R0402 must not be disabled)
#import-graph=no

# Create a graph of external dependencies in the given file (report R0402 must
# not be disabled)
ext-import-graph=no

# Create a graph of internal dependencies in the given file (report R0402 must
# not be disabled)
int-import-graph=no

# FORMAT
# checks for :
# * unauthorized constructions
# * strict indentation
# * line length
# * use of <> instead of !=
# 
[FORMAT]

# Maximum number of characters on a single line.
###max-line-length=80
max-line-length=120

# Maximum number of lines in a module
#max-module-lines=1000
max-module-lines=20000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# MISCELLANEOUS
# checks for:
# * warning notes in the code like FIXME, XXX
# * PEP 263: source code with non ascii character but no encoding declaration
# 
[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


# checks for similarities and duplicated code. This computation may be
# memory / CPU intensive, so you should disable it if you experiments some
# problems.
# 
[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes
