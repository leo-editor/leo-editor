#@+leo-ver=5-thin
#@+node:ekr.20170302123956.1: * @file ../doc/leoAttic.txt
# This is Leo's final resting place for dead code.
# New in Leo 6.7.5. The attic will contain only code retired in the present release.

#@@language python
#@@killbeautify
#@+all
#@+node:ekr.20220917052540.1: ** retire read-outline-only
#@+node:ekr.20031218072017.2839: *3* c_file.readOutlineOnly
@g.commander_command('read-outline-only')
def readOutlineOnly(self: Self, event: Event = None) -> None:
    """Open a Leo outline, but do not read any derived files."""
    c = self
    c.endEditing()
    fileName = g.app.gui.runOpenFileDialog(c,
        title="Read Outline Only",
        filetypes=[("Leo files", "*.leo *.leojs *.db"), ("All files", "*")],
        defaultextension=".leo")
    if not fileName:
        return
    try:
        # pylint: disable=assignment-from-no-return
        # Can't use 'with" because readOutlineOnly closes the file.
        theFile = open(fileName, 'r')
        g.chdir(fileName)
        c = g.app.newCommander(fileName)
        frame = c.frame
        frame.deiconify()
        frame.lift()
        c.fileCommands.readOutlineOnly(theFile, fileName)  # closes file.
    except Exception:
        g.es("can not open:", fileName)
#@+node:ekr.20031218072017.3030: *3* fc.readOutlineOnly
def readOutlineOnly(self, theFile: Any, fileName: str) -> VNode:
    c = self.c
    # Set c.openDirectory
    theDir = g.os_path_dirname(fileName)
    if theDir:
        c.openDirectory = c.frame.openDirectory = theDir
    v, ratio = self.getLeoFile(theFile, fileName, readAtFileNodesFlag=False)
    c.redraw()
    c.frame.deiconify()
    junk, junk, secondary_ratio = self.frame.initialRatios()
    c.frame.resizePanesToRatio(ratio, secondary_ratio)
    return v
#@-all
#@@nosearch
#@-leo
