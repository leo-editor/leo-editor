# Leo colorizer control file for mqsc mode.
# This file is in the public domain.

# Properties for mqsc mode.
properties = {
    "lineComment": "*",
}

# Attributes dict for mqsc_main ruleset.
mqsc_main_attributes_dict = {
    "default": "null",
    "digit_re": "",
    "escape": "\\",
    "highlight_digits": "true",
    "ignore_case": "true",
    "no_word_sep": "",
}

# Dictionary of attributes dictionaries for mqsc mode.
attributesDictDict = {
    "mqsc_main": mqsc_main_attributes_dict,
}

# Keywords dict for mqsc_main ruleset.
mqsc_main_keywords_dict = {
    "all": "keyword1",
    "alt": "keyword1",
    "altdate": "markup",
    "alter": "keyword1",
    "alttime": "markup",
    "applicid": "markup",
    "appltype": "markup",
    "authorev": "markup",
    "batches": "markup",
    "batchint": "markup",
    "batchsz": "markup",
    "boqname": "markup",
    "bothresh": "markup",
    "bufsrcvd": "markup",
    "bufssent": "markup",
    "bytsrcvd": "markup",
    "bytssent": "markup",
    "ccsid": "markup",
    "chad": "markup",
    "chadev": "markup",
    "chadexit": "markup",
    "channel": "markup",
    "chl": "keyword2",
    "chltype": "markup",
    "chst": "keyword2",
    "chstada": "markup",
    "chstati": "markup",
    "chstatus": "keyword2",
    "clear": "keyword1",
    "clusdate": "markup",
    "clusinfo": "markup",
    "clusnl": "markup",
    "clusqmgr": "markup",
    "clusqt": "markup",
    "cluster": "markup",
    "clustime": "markup",
    "clwldata": "markup",
    "clwlexit": "markup",
    "clwlwen": "markup",
    "cmdlevel": "markup",
    "commandq": "markup",
    "conname": "markup",
    "convert": "markup",
    "crdate": "markup",
    "crtime": "markup",
    "curdepth": "markup",
    "curluwid": "markup",
    "curmsgs": "markup",
    "curseqno": "markup",
    "deadq": "markup",
    "def": "keyword1",
    "defbind": "markup",
    "define": "keyword1",
    "defprty": "markup",
    "defpsist": "markup",
    "defsopt": "markup",
    "deftype": "markup",
    "defxmitq": "markup",
    "delete": "keyword1",
    "descr": "markup",
    "dis": "keyword1",
    "discint": "markup",
    "display": "keyword1",
    "distl": "markup",
    "end": "keyword1",
    "envrdata": "markup",
    "get": "markup",
    "hardenbo": "markup",
    "hbint": "markup",
    "indoubt": "markup",
    "inhibtev": "markup",
    "initq": "markup",
    "ipprocs": "markup",
    "jobname": "markup",
    "like": "keyword1",
    "localev": "markup",
    "longrts": "markup",
    "longrty": "markup",
    "longtmr": "markup",
    "lstluwid": "markup",
    "lstmsgda": "markup",
    "lstmsgti": "markup",
    "lstseqno": "markup",
    "maxdepth": "markup",
    "maxhands": "markup",
    "maxmsgl": "markup",
    "maxprty": "markup",
    "maxumsgs": "markup",
    "mcaname": "markup",
    "mcastat": "markup",
    "mcatype": "markup",
    "mcauser": "markup",
    "modename": "markup",
    "mrdata": "markup",
    "mrexit": "markup",
    "mrrty": "markup",
    "mrtmr": "markup",
    "msgdata": "markup",
    "msgdlvsq": "markup",
    "msgexit": "markup",
    "msgs": "markup",
    "namcount": "markup",
    "namelist": "keyword2",
    "names": "markup",
    "netprty": "markup",
    "nl": "keyword2",
    "npmspeed": "markup",
    "opprocs": "markup",
    "password": "markup",
    "perfmev": "markup",
    "ping": "keyword1",
    "platform": "markup",
    "proc": "keyword2",
    "process": "markup",
    "put": "markup",
    "putaut": "markup",
    "qa": "keyword2",
    "qalias": "keyword2",
    "qc": "keyword2",
    "qcluster": "keyword2",
    "qdepthhi": "markup",
    "qdepthlo": "markup",
    "qdphiev": "markup",
    "qdploev": "markup",
    "qdpmaxev": "markup",
    "ql": "keyword2",
    "qlocal": "keyword2",
    "qm": "keyword2",
    "qmgr": "keyword2",
    "qmid": "markup",
    "qmname": "markup",
    "qmodel": "keyword2",
    "qmtype": "markup",
    "qr": "keyword2",
    "qremote": "keyword2",
    "qsvciev": "markup",
    "qsvcint": "markup",
    "qtype": "markup",
    "queue": "keyword2",
    "rcvdata": "markup",
    "rcvexit": "markup",
    "ref": "keyword1",
    "refresh": "keyword1",
    "remoteev": "markup",
    "replace": "keyword1",
    "repos": "markup",
    "reposnl": "markup",
    "reset": "keyword1",
    "resolve": "keyword1",
    "resume": "keyword1",
    "retintvl": "markup",
    "rname": "markup",
    "rqmname": "markup",
    "scope": "markup",
    "scydata": "markup",
    "scyexit": "markup",
    "senddata": "markup",
    "sendexit": "markup",
    "seqwrap": "markup",
    "share": "markup",
    "shortrts": "markup",
    "shortrty": "markup",
    "shorttmr": "markup",
    "start": "keyword1",
    "status": "markup",
    "stop": "keyword1",
    "stopreq": "markup",
    "strstpev": "markup",
    "suspend": "markup",
    "syncpt": "markup",
    "targq": "markup",
    "tpname": "markup",
    "trigdata": "markup",
    "trigdpth": "markup",
    "trigger": "markup",
    "trigint": "markup",
    "trigmpri": "markup",
    "trigtype": "markup",
    "trptype": "markup",
    "type": "markup",
    "usage": "markup",
    "userdata": "markup",
    "userid": "markup",
    "xmitq": "markup",
}

# Dictionary of keywords dictionaries for mqsc mode.
keywordsDictDict = {
    "mqsc_main": mqsc_main_keywords_dict,
}

# Rules for mqsc_main ruleset.

def mqsc_rule0(colorer, s, i):
    return colorer.match_eol_span(s, i, kind="comment1", seq="*",
          at_line_start=True)

def mqsc_rule1(colorer, s, i):
    return colorer.match_span(s, i, kind="literal1", begin="('", end="')",
          exclude_match=True,
          no_line_break=True)

def mqsc_rule2(colorer, s, i):
    return colorer.match_span(s, i, kind="literal2", begin="(", end=")",
          exclude_match=True,
          no_line_break=True)

def mqsc_rule3(colorer, s, i):
    return colorer.match_plain_seq(s, i, kind="operator", seq="+")

def mqsc_rule4(colorer, s, i):
    return colorer.match_keywords(s, i)

# Rules dict for mqsc_main ruleset.
rulesDict1 = {
    "(": [mqsc_rule1, mqsc_rule2,],
    "*": [mqsc_rule0,],
    "+": [mqsc_rule3,],
    "0": [mqsc_rule4,],
    "1": [mqsc_rule4,],
    "2": [mqsc_rule4,],
    "3": [mqsc_rule4,],
    "4": [mqsc_rule4,],
    "5": [mqsc_rule4,],
    "6": [mqsc_rule4,],
    "7": [mqsc_rule4,],
    "8": [mqsc_rule4,],
    "9": [mqsc_rule4,],
    "@": [mqsc_rule4,],
    "A": [mqsc_rule4,],
    "B": [mqsc_rule4,],
    "C": [mqsc_rule4,],
    "D": [mqsc_rule4,],
    "E": [mqsc_rule4,],
    "F": [mqsc_rule4,],
    "G": [mqsc_rule4,],
    "H": [mqsc_rule4,],
    "I": [mqsc_rule4,],
    "J": [mqsc_rule4,],
    "K": [mqsc_rule4,],
    "L": [mqsc_rule4,],
    "M": [mqsc_rule4,],
    "N": [mqsc_rule4,],
    "O": [mqsc_rule4,],
    "P": [mqsc_rule4,],
    "Q": [mqsc_rule4,],
    "R": [mqsc_rule4,],
    "S": [mqsc_rule4,],
    "T": [mqsc_rule4,],
    "U": [mqsc_rule4,],
    "V": [mqsc_rule4,],
    "W": [mqsc_rule4,],
    "X": [mqsc_rule4,],
    "Y": [mqsc_rule4,],
    "Z": [mqsc_rule4,],
    "a": [mqsc_rule4,],
    "b": [mqsc_rule4,],
    "c": [mqsc_rule4,],
    "d": [mqsc_rule4,],
    "e": [mqsc_rule4,],
    "f": [mqsc_rule4,],
    "g": [mqsc_rule4,],
    "h": [mqsc_rule4,],
    "i": [mqsc_rule4,],
    "j": [mqsc_rule4,],
    "k": [mqsc_rule4,],
    "l": [mqsc_rule4,],
    "m": [mqsc_rule4,],
    "n": [mqsc_rule4,],
    "o": [mqsc_rule4,],
    "p": [mqsc_rule4,],
    "q": [mqsc_rule4,],
    "r": [mqsc_rule4,],
    "s": [mqsc_rule4,],
    "t": [mqsc_rule4,],
    "u": [mqsc_rule4,],
    "v": [mqsc_rule4,],
    "w": [mqsc_rule4,],
    "x": [mqsc_rule4,],
    "y": [mqsc_rule4,],
    "z": [mqsc_rule4,],
}

# x.rulesDictDict for mqsc mode.
rulesDictDict = {
    "mqsc_main": rulesDict1,
}

# Import dict for mqsc mode.
importDict = {}
