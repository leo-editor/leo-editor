# Leo colorizer control file for bcel mode.
# This file is in the public domain.

# Properties for bcel mode.
properties = {
    "commentEnd": "*/",
    "commentStart": "/*",
    "lineComment": "//",
}

# Attributes dict for bcel_main ruleset.
bcel_main_attributes_dict = {
    "default": "null",
    "digit_re": "",
    "escape": "",
    "highlight_digits": "true",
    "ignore_case": "true",
    "no_word_sep": "",
}

# Dictionary of attributes dictionaries for bcel mode.
attributesDictDict = {
    "bcel_main": bcel_main_attributes_dict,
}

# Keywords dict for bcel_main ruleset.
bcel_main_keywords_dict = {
    "aaload": "keyword1",
    "aastore": "keyword1",
    "abstract": "keyword1",
    "aconst_null": "keyword1",
    "aload": "keyword1",
    "aload_0": "keyword1",
    "aload_1": "keyword1",
    "aload_2": "keyword1",
    "aload_3": "keyword1",
    "anewarray": "keyword1",
    "areturn": "keyword1",
    "arraylength": "keyword1",
    "astore": "keyword1",
    "astore_0": "keyword1",
    "astore_1": "keyword1",
    "astore_2": "keyword1",
    "astore_3": "keyword1",
    "athrow": "keyword1",
    "baload": "keyword1",
    "bastore": "keyword1",
    "bipush": "keyword1",
    "boolean": "keyword3",
    "breakpoint": "keyword1",
    "byte": "keyword3",
    "caload": "keyword1",
    "castore": "keyword1",
    "char": "keyword3",
    "checkcast": "keyword1",
    "class": "keyword3",
    "clinit": "keyword1",
    "d2f": "keyword1",
    "d2i": "keyword1",
    "d2l": "keyword1",
    "dadd": "keyword1",
    "daload": "keyword1",
    "dastore": "keyword1",
    "dcmpg": "keyword1",
    "dcmpl": "keyword1",
    "dconst_0": "keyword1",
    "dconst_1": "keyword1",
    "ddiv": "keyword1",
    "dload": "keyword1",
    "dload_0": "keyword1",
    "dload_1": "keyword1",
    "dload_2": "keyword1",
    "dload_3": "keyword1",
    "dmul": "keyword1",
    "dneg": "keyword1",
    "double": "keyword3",
    "drem": "keyword1",
    "dreturn": "keyword1",
    "dstore": "keyword1",
    "dstore_0": "keyword1",
    "dstore_1": "keyword1",
    "dstore_2": "keyword1",
    "dstore_3": "keyword1",
    "dsub": "keyword1",
    "dup": "keyword1",
    "dup2": "keyword1",
    "dup2_x1": "keyword1",
    "dup2_x2": "keyword1",
    "dup_x1": "keyword1",
    "dup_x2": "keyword1",
    "extends": "keyword1",
    "f2d": "keyword1",
    "f2i": "keyword1",
    "f2l": "keyword1",
    "fadd": "keyword1",
    "faload": "keyword1",
    "fastore": "keyword1",
    "fcmpg": "keyword1",
    "fcmpl": "keyword1",
    "fconst_0": "keyword1",
    "fconst_1": "keyword1",
    "fconst_2": "keyword1",
    "fdiv": "keyword1",
    "final": "keyword1",
    "fload": "keyword1",
    "fload_0": "keyword1",
    "fload_1": "keyword1",
    "fload_2": "keyword1",
    "fload_3": "keyword1",
    "float": "keyword3",
    "fmul": "keyword1",
    "fneg": "keyword1",
    "frem": "keyword1",
    "freturn": "keyword1",
    "fstore": "keyword1",
    "fstore_0": "keyword1",
    "fstore_1": "keyword1",
    "fstore_2": "keyword1",
    "fstore_3": "keyword1",
    "fsub": "keyword1",
    "getfield": "keyword1",
    "getstatic": "keyword1",
    "goto": "keyword1",
    "goto_w": "keyword1",
    "i2b": "keyword1",
    "i2c": "keyword1",
    "i2d": "keyword1",
    "i2f": "keyword1",
    "i2l": "keyword1",
    "i2s": "keyword1",
    "iadd": "keyword1",
    "iaload": "keyword1",
    "iand": "keyword1",
    "iastore": "keyword1",
    "iconst_0": "keyword1",
    "iconst_1": "keyword1",
    "iconst_2": "keyword1",
    "iconst_3": "keyword1",
    "iconst_4": "keyword1",
    "iconst_5": "keyword1",
    "iconst_m1": "keyword1",
    "idiv": "keyword1",
    "if_acmpeq": "keyword1",
    "if_acmpne": "keyword1",
    "if_icmpeq": "keyword1",
    "if_icmpge": "keyword1",
    "if_icmpgt": "keyword1",
    "if_icmple": "keyword1",
    "if_icmplt": "keyword1",
    "if_icmpne": "keyword1",
    "ifeq": "keyword1",
    "ifge": "keyword1",
    "ifgt": "keyword1",
    "ifle": "keyword1",
    "iflt": "keyword1",
    "ifne": "keyword1",
    "ifnonnull": "keyword1",
    "ifnull": "keyword1",
    "iinc": "keyword1",
    "iload": "keyword1",
    "iload_0": "keyword1",
    "iload_1": "keyword1",
    "iload_2": "keyword1",
    "iload_3": "keyword1",
    "impdep1": "keyword1",
    "impdep2": "keyword1",
    "implements": "keyword1",
    "imul": "keyword1",
    "ineg": "keyword1",
    "init": "keyword1",
    "instanceof": "keyword1",
    "int": "keyword3",
    "interface": "keyword3",
    "invokeinterface": "keyword1",
    "invokespecial": "keyword1",
    "invokestatic": "keyword1",
    "invokevirtual": "keyword1",
    "ior": "keyword1",
    "irem": "keyword1",
    "ireturn": "keyword1",
    "ishl": "keyword1",
    "ishr": "keyword1",
    "istore": "keyword1",
    "istore_0": "keyword1",
    "istore_1": "keyword1",
    "istore_2": "keyword1",
    "istore_3": "keyword1",
    "isub": "keyword1",
    "iushr": "keyword1",
    "ixor": "keyword1",
    "jsr": "keyword1",
    "jsr_w": "keyword1",
    "l2d": "keyword1",
    "l2f": "keyword1",
    "l2i": "keyword1",
    "ladd": "keyword1",
    "laload": "keyword1",
    "land": "keyword1",
    "lastore": "keyword1",
    "lcmp": "keyword1",
    "lconst_0": "keyword1",
    "lconst_1": "keyword1",
    "ldc": "keyword1",
    "ldc2_w": "keyword1",
    "ldc_w": "keyword1",
    "ldiv": "keyword1",
    "lload": "keyword1",
    "lload_0": "keyword1",
    "lload_1": "keyword1",
    "lload_2": "keyword1",
    "lload_3": "keyword1",
    "lmul": "keyword1",
    "lneg": "keyword1",
    "long": "keyword3",
    "lookupswitch": "keyword1",
    "lor": "keyword1",
    "lrem": "keyword1",
    "lreturn": "keyword1",
    "lshl": "keyword1",
    "lshr": "keyword1",
    "lstore": "keyword1",
    "lstore_0": "keyword1",
    "lstore_1": "keyword1",
    "lstore_2": "keyword1",
    "lstore_3": "keyword1",
    "lsub": "keyword1",
    "lushr": "keyword1",
    "lxor": "keyword1",
    "monitorenter": "keyword1",
    "monitorexit": "keyword1",
    "multianewarray": "keyword1",
    "native": "keyword1",
    "new": "keyword1",
    "newarray": "keyword1",
    "nop": "keyword1",
    "pop": "keyword1",
    "pop2": "keyword1",
    "private": "keyword1",
    "protected": "keyword1",
    "public": "keyword1",
    "putfield": "keyword1",
    "putstatic": "keyword1",
    "ret": "keyword1",
    "return": "keyword1",
    "saload": "keyword1",
    "sastore": "keyword1",
    "short": "keyword3",
    "sipush": "keyword1",
    "static": "keyword1",
    "swap": "keyword1",
    "synchronized": "keyword1",
    "tableswitch": "keyword1",
    "throw": "keyword1",
    "throws": "keyword1",
    "transient": "keyword1",
    "void": "keyword3",
    "volatile": "keyword1",
    "wide": "keyword1",
}

# Dictionary of keywords dictionaries for bcel mode.
keywordsDictDict = {
    "bcel_main": bcel_main_keywords_dict,
}

# Rules for bcel_main ruleset.

def bcel_rule0(colorer, s, i):
    return colorer.match_plain_seq(s, i, kind="comment1", seq="/**/")

def bcel_rule1(colorer, s, i):
    return colorer.match_span(s, i, kind="comment3", begin="/**", end="*/",
          delegate="bcel::javadoc")

def bcel_rule2(colorer, s, i):
    return colorer.match_span(s, i, kind="comment1", begin="/*", end="*/")

def bcel_rule3(colorer, s, i):
    return colorer.match_eol_span(s, i, kind="comment2", seq="//")

def bcel_rule4(colorer, s, i):
    return colorer.match_span(s, i, kind="literal1", begin="'", end="'",
          no_line_break=True)

def bcel_rule5(colorer, s, i):
    return colorer.match_span(s, i, kind="literal1", begin="\"", end="\"",
          no_line_break=True)

def bcel_rule6(colorer, s, i):
    return colorer.match_mark_following(s, i, kind="keyword2", pattern="%")

def bcel_rule7(colorer, s, i):
    return colorer.match_mark_following(s, i, kind="keyword2", pattern="#")

def bcel_rule8(colorer, s, i):
    return colorer.match_mark_previous(s, i, kind="label", pattern=":",
          at_line_start=True,
          exclude_match=True)

def bcel_rule9(colorer, s, i):
    return colorer.match_plain_seq(s, i, kind="operator", seq=">")

def bcel_rule10(colorer, s, i):
    return colorer.match_plain_seq(s, i, kind="operator", seq="<")

def bcel_rule11(colorer, s, i):
    return colorer.match_keywords(s, i)

# Rules dict for bcel_main ruleset.
rulesDict1 = {
    "\"": [bcel_rule5,],
    "#": [bcel_rule7,],
    "%": [bcel_rule6,],
    "'": [bcel_rule4,],
    "/": [bcel_rule0, bcel_rule1, bcel_rule2, bcel_rule3,],
    "0": [bcel_rule11,],
    "1": [bcel_rule11,],
    "2": [bcel_rule11,],
    "3": [bcel_rule11,],
    "4": [bcel_rule11,],
    "5": [bcel_rule11,],
    "6": [bcel_rule11,],
    "7": [bcel_rule11,],
    "8": [bcel_rule11,],
    "9": [bcel_rule11,],
    ":": [bcel_rule8,],
    "<": [bcel_rule10,],
    ">": [bcel_rule9,],
    "@": [bcel_rule11,],
    "A": [bcel_rule11,],
    "B": [bcel_rule11,],
    "C": [bcel_rule11,],
    "D": [bcel_rule11,],
    "E": [bcel_rule11,],
    "F": [bcel_rule11,],
    "G": [bcel_rule11,],
    "H": [bcel_rule11,],
    "I": [bcel_rule11,],
    "J": [bcel_rule11,],
    "K": [bcel_rule11,],
    "L": [bcel_rule11,],
    "M": [bcel_rule11,],
    "N": [bcel_rule11,],
    "O": [bcel_rule11,],
    "P": [bcel_rule11,],
    "Q": [bcel_rule11,],
    "R": [bcel_rule11,],
    "S": [bcel_rule11,],
    "T": [bcel_rule11,],
    "U": [bcel_rule11,],
    "V": [bcel_rule11,],
    "W": [bcel_rule11,],
    "X": [bcel_rule11,],
    "Y": [bcel_rule11,],
    "Z": [bcel_rule11,],
    "_": [bcel_rule11,],
    "a": [bcel_rule11,],
    "b": [bcel_rule11,],
    "c": [bcel_rule11,],
    "d": [bcel_rule11,],
    "e": [bcel_rule11,],
    "f": [bcel_rule11,],
    "g": [bcel_rule11,],
    "h": [bcel_rule11,],
    "i": [bcel_rule11,],
    "j": [bcel_rule11,],
    "k": [bcel_rule11,],
    "l": [bcel_rule11,],
    "m": [bcel_rule11,],
    "n": [bcel_rule11,],
    "o": [bcel_rule11,],
    "p": [bcel_rule11,],
    "q": [bcel_rule11,],
    "r": [bcel_rule11,],
    "s": [bcel_rule11,],
    "t": [bcel_rule11,],
    "u": [bcel_rule11,],
    "v": [bcel_rule11,],
    "w": [bcel_rule11,],
    "x": [bcel_rule11,],
    "y": [bcel_rule11,],
    "z": [bcel_rule11,],
}

# x.rulesDictDict for bcel mode.
rulesDictDict = {
    "bcel_main": rulesDict1,
}

# Import dict for bcel mode.
importDict = {}
